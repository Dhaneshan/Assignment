{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPOB/ZLywZTYSe3QnuyeJHR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Import the Required Frameworks"],"metadata":{"id":"WMguxsC5DaFx"}},{"cell_type":"code","execution_count":66,"metadata":{"id":"r7eE95q6C_jf","executionInfo":{"status":"ok","timestamp":1686153721117,"user_tz":-330,"elapsed":4,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"outputs":[],"source":["import pandas as pd\n","import seaborn as sns\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import roc_curve\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import roc_auc_score\n","from sklearn import preprocessing\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import f1_score\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import classification_report\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.metrics import accuracy_score\n","from sklearn.ensemble import AdaBoostClassifier"]},{"cell_type":"markdown","source":["Problem Statement\n","1\n",":\n","\n","Load the 'Breast_Cancer_Dataset.csv' dataset into a DataFrame and \n","perform the following tasks:\n","\n","1.\n","Identify the null values and remove the null rows and columns by using the dropna() \n","function\n","\n","2.\n","Encode the 'diagnosis' column using the LabelEncoder()\n","\n","3.\n","Considering the 'diagnosis' column as the target, separate the target variable and the \n","feature vectors\n","\n","4.\n","Split\n","the dataset into the training set and test set in a 70:30 ratio\n","\n","5.\n","Building a Logistic Regression, Naive Bayes, Decision Tree (CART), K\n","-\n","NN, SVM, and  RandomForestClassifier models; Also print their accuracies\n","\n","6.\n","Calculate and plot the confusion matrix"],"metadata":{"id":"9_KTZHhzGO2u"}},{"cell_type":"code","source":["Data=pd.read_csv(\"/content/Breast_Cancer_Dataset.csv\")\n","Data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"R8tDpu5dGcWD","executionInfo":{"status":"ok","timestamp":1686152593157,"user_tz":-330,"elapsed":27,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"26555d3f-fcb8-43f5-f33d-5709d9e2d504"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n","0    842302         M        17.99         10.38          122.80     1001.0   \n","1    842517         M        20.57         17.77          132.90     1326.0   \n","2  84300903         M        19.69         21.25          130.00     1203.0   \n","3  84348301         M        11.42         20.38           77.58      386.1   \n","4  84358402         M        20.29         14.34          135.10     1297.0   \n","\n","   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n","0          0.11840           0.27760          0.3001              0.14710   \n","1          0.08474           0.07864          0.0869              0.07017   \n","2          0.10960           0.15990          0.1974              0.12790   \n","3          0.14250           0.28390          0.2414              0.10520   \n","4          0.10030           0.13280          0.1980              0.10430   \n","\n","   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n","0  ...          17.33           184.60      2019.0            0.1622   \n","1  ...          23.41           158.80      1956.0            0.1238   \n","2  ...          25.53           152.50      1709.0            0.1444   \n","3  ...          26.50            98.87       567.7            0.2098   \n","4  ...          16.67           152.20      1575.0            0.1374   \n","\n","   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n","0             0.6656           0.7119                0.2654          0.4601   \n","1             0.1866           0.2416                0.1860          0.2750   \n","2             0.4245           0.4504                0.2430          0.3613   \n","3             0.8663           0.6869                0.2575          0.6638   \n","4             0.2050           0.4000                0.1625          0.2364   \n","\n","   fractal_dimension_worst  Unnamed: 32  \n","0                  0.11890          NaN  \n","1                  0.08902          NaN  \n","2                  0.08758          NaN  \n","3                  0.17300          NaN  \n","4                  0.07678          NaN  \n","\n","[5 rows x 33 columns]"],"text/html":["\n","  <div id=\"df-dab46aaa-9d11-4c22-93db-02283a268f86\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>diagnosis</th>\n","      <th>radius_mean</th>\n","      <th>texture_mean</th>\n","      <th>perimeter_mean</th>\n","      <th>area_mean</th>\n","      <th>smoothness_mean</th>\n","      <th>compactness_mean</th>\n","      <th>concavity_mean</th>\n","      <th>concave points_mean</th>\n","      <th>...</th>\n","      <th>texture_worst</th>\n","      <th>perimeter_worst</th>\n","      <th>area_worst</th>\n","      <th>smoothness_worst</th>\n","      <th>compactness_worst</th>\n","      <th>concavity_worst</th>\n","      <th>concave points_worst</th>\n","      <th>symmetry_worst</th>\n","      <th>fractal_dimension_worst</th>\n","      <th>Unnamed: 32</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>842302</td>\n","      <td>M</td>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.80</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.3001</td>\n","      <td>0.14710</td>\n","      <td>...</td>\n","      <td>17.33</td>\n","      <td>184.60</td>\n","      <td>2019.0</td>\n","      <td>0.1622</td>\n","      <td>0.6656</td>\n","      <td>0.7119</td>\n","      <td>0.2654</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>842517</td>\n","      <td>M</td>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.90</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.0869</td>\n","      <td>0.07017</td>\n","      <td>...</td>\n","      <td>23.41</td>\n","      <td>158.80</td>\n","      <td>1956.0</td>\n","      <td>0.1238</td>\n","      <td>0.1866</td>\n","      <td>0.2416</td>\n","      <td>0.1860</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>84300903</td>\n","      <td>M</td>\n","      <td>19.69</td>\n","      <td>21.25</td>\n","      <td>130.00</td>\n","      <td>1203.0</td>\n","      <td>0.10960</td>\n","      <td>0.15990</td>\n","      <td>0.1974</td>\n","      <td>0.12790</td>\n","      <td>...</td>\n","      <td>25.53</td>\n","      <td>152.50</td>\n","      <td>1709.0</td>\n","      <td>0.1444</td>\n","      <td>0.4245</td>\n","      <td>0.4504</td>\n","      <td>0.2430</td>\n","      <td>0.3613</td>\n","      <td>0.08758</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>84348301</td>\n","      <td>M</td>\n","      <td>11.42</td>\n","      <td>20.38</td>\n","      <td>77.58</td>\n","      <td>386.1</td>\n","      <td>0.14250</td>\n","      <td>0.28390</td>\n","      <td>0.2414</td>\n","      <td>0.10520</td>\n","      <td>...</td>\n","      <td>26.50</td>\n","      <td>98.87</td>\n","      <td>567.7</td>\n","      <td>0.2098</td>\n","      <td>0.8663</td>\n","      <td>0.6869</td>\n","      <td>0.2575</td>\n","      <td>0.6638</td>\n","      <td>0.17300</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>84358402</td>\n","      <td>M</td>\n","      <td>20.29</td>\n","      <td>14.34</td>\n","      <td>135.10</td>\n","      <td>1297.0</td>\n","      <td>0.10030</td>\n","      <td>0.13280</td>\n","      <td>0.1980</td>\n","      <td>0.10430</td>\n","      <td>...</td>\n","      <td>16.67</td>\n","      <td>152.20</td>\n","      <td>1575.0</td>\n","      <td>0.1374</td>\n","      <td>0.2050</td>\n","      <td>0.4000</td>\n","      <td>0.1625</td>\n","      <td>0.2364</td>\n","      <td>0.07678</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 33 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dab46aaa-9d11-4c22-93db-02283a268f86')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-dab46aaa-9d11-4c22-93db-02283a268f86 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-dab46aaa-9d11-4c22-93db-02283a268f86');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# Identify the null values and remove the null rows and columns by using the dropna() function\n","Data.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ySgm_tyRPtiT","executionInfo":{"status":"ok","timestamp":1686152593158,"user_tz":-330,"elapsed":24,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"1ba26a4d-3bb4-4e0a-a399-bdf623290df1"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id                           0\n","diagnosis                    0\n","radius_mean                  0\n","texture_mean                 0\n","perimeter_mean               0\n","area_mean                    0\n","smoothness_mean              0\n","compactness_mean             0\n","concavity_mean               0\n","concave points_mean          0\n","symmetry_mean                0\n","fractal_dimension_mean       0\n","radius_se                    0\n","texture_se                   0\n","perimeter_se                 0\n","area_se                      0\n","smoothness_se                0\n","compactness_se               0\n","concavity_se                 0\n","concave points_se            0\n","symmetry_se                  0\n","fractal_dimension_se         0\n","radius_worst                 0\n","texture_worst                0\n","perimeter_worst              0\n","area_worst                   0\n","smoothness_worst             0\n","compactness_worst            0\n","concavity_worst              0\n","concave points_worst         0\n","symmetry_worst               0\n","fractal_dimension_worst      0\n","Unnamed: 32                569\n","dtype: int64"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# Identify and remove null columns\n","Data.dropna(axis=1, inplace=True) # Identify and remove null Columns\n","Data.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9RLGwnmsP2AT","executionInfo":{"status":"ok","timestamp":1686152593160,"user_tz":-330,"elapsed":22,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"7236644b-d982-41fe-9e2b-baf521b34cc2"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id                         0\n","diagnosis                  0\n","radius_mean                0\n","texture_mean               0\n","perimeter_mean             0\n","area_mean                  0\n","smoothness_mean            0\n","compactness_mean           0\n","concavity_mean             0\n","concave points_mean        0\n","symmetry_mean              0\n","fractal_dimension_mean     0\n","radius_se                  0\n","texture_se                 0\n","perimeter_se               0\n","area_se                    0\n","smoothness_se              0\n","compactness_se             0\n","concavity_se               0\n","concave points_se          0\n","symmetry_se                0\n","fractal_dimension_se       0\n","radius_worst               0\n","texture_worst              0\n","perimeter_worst            0\n","area_worst                 0\n","smoothness_worst           0\n","compactness_worst          0\n","concavity_worst            0\n","concave points_worst       0\n","symmetry_worst             0\n","fractal_dimension_worst    0\n","dtype: int64"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# Encode the 'diagnosis' column using the LabelEncoder()\n","label_encoder = LabelEncoder()\n","Data['diagnosis'] = label_encoder.fit_transform(Data['diagnosis'])"],"metadata":{"id":"8HtsnujtQWSY","executionInfo":{"status":"ok","timestamp":1686152593161,"user_tz":-330,"elapsed":20,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["# Considering the 'diagnosis' column as the target, separate the target variable and the feature vectors\n","X = Data.drop('diagnosis', axis=1)\n","y = Data['diagnosis']"],"metadata":{"id":"79qTuc49Q8k1","executionInfo":{"status":"ok","timestamp":1686152593161,"user_tz":-330,"elapsed":19,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["# Split the dataset into the training set and test set in a 70:30 ratio\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)\n"],"metadata":{"id":"_lWxH9o1dpDs","executionInfo":{"status":"ok","timestamp":1686152593161,"user_tz":-330,"elapsed":18,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# Initialize the models\n","models = [\n","    LogisticRegression(),\n","    GaussianNB(),\n","    DecisionTreeClassifier(),\n","    KNeighborsClassifier(),\n","    SVC(),\n","    RandomForestClassifier()\n","]\n","# Train and evaluate each model\n","for model in models:\n","    model.fit(X_train, y_train)\n","    y_pred = model.predict(X_test)\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(f\"{type(model).__name__} accuracy: {accuracy}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ivQHn8_4kgsk","executionInfo":{"status":"ok","timestamp":1686152593161,"user_tz":-330,"elapsed":17,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"badb87a2-fc2f-4efc-e367-214fb7e3d9e6"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["LogisticRegression accuracy: 0.631578947368421\n","GaussianNB accuracy: 0.631578947368421\n","DecisionTreeClassifier accuracy: 0.9415204678362573\n","KNeighborsClassifier accuracy: 0.7660818713450293\n","SVC accuracy: 0.631578947368421\n","RandomForestClassifier accuracy: 0.9532163742690059\n"]}]},{"cell_type":"code","source":["# Calculate the confusion matrix\n","cm = confusion_matrix(y_test, y_pred)\n","\n","# Plot the confusion matrix\n","print(cm)\n","sns.heatmap(cm,annot=True,lw =2,cbar=False)\n","plt.title('Confusion Matrix')\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"ZTgMYWlClKeU","executionInfo":{"status":"ok","timestamp":1686152593789,"user_tz":-330,"elapsed":642,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"6502c4c6-3a9a-404a-9fc6-2532482efac3"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["[[105   3]\n"," [  5  58]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"M60REzfuoCBl"}},{"cell_type":"markdown","source":["Problem Statement\n","2\n",": \n","\n","Load the \n","'Breast_Cancer_Dataset.csv' dataset into a DataFrame and \n","perform the following tasks:\n","\n","1.\n","Identify the null values and remove the null rows and columns by using the dropna() \n","function\n","\n","2.\n","Considering the 'diagnosis' column as the target, encode the 'diagnosis' colu\n","mn using the \n","LabelEncoder()\n","\n","3.\n","Separate the target variable and the feature vectors\n","\n","4.\n","Split the dataset into the training set and test set in a 70:30 ratio\n","\n","5.\n","Building a Logistic Regression, Naive Bayes, Decision Tree (CART), K\n","-\n","NN, SVM, andRandomForestClassifier  models; Also, print their accuracies\n","\n","6.\n","Calculate the  ROC_AUC score based on the False Positive Rate (FPR) and True Positive \n","Rate (TPR)\n","\n","7.\n","Plot the ROC Curve using the Matplotlib library\n","\n","8.\n","Calculate the F1 Score\n","\n","9.\n","Calculate and Print the Precision, Recall, and F1 s\n","core using the classification_report() \n","function"],"metadata":{"id":"gx7Anx5voreY"}},{"cell_type":"code","source":["Data1=pd.read_csv(\"/content/Breast_Cancer_Dataset.csv\")"],"metadata":{"id":"NJ4F0os1pCGx","executionInfo":{"status":"ok","timestamp":1686152593791,"user_tz":-330,"elapsed":35,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["# Identify the null values and remove the null rows and columns by using the dropna() function\n","Data1.isna().sum()\n","Data1.dropna(axis=1,inplace=True)\n","Data1.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zBEmm9SFaZ4Z","executionInfo":{"status":"ok","timestamp":1686152593791,"user_tz":-330,"elapsed":32,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"f50fecd0-6ee7-4973-e060-8c55df464114"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(569, 32)"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["# Considering the 'diagnosis' column as the target, encode the 'diagnosis' colu mn using the LabelEncoder()\n","Data1[\"diagnosis\"]=label_encoder.fit_transform(Data1['diagnosis'])"],"metadata":{"id":"bpNYkueDbEjA","executionInfo":{"status":"ok","timestamp":1686152593792,"user_tz":-330,"elapsed":23,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["# Separate the target variable and the feature vectors\n","X1=Data1.drop(\"diagnosis\",axis=1)\n","y1=Data1[\"diagnosis\"]"],"metadata":{"id":"y0V-MUH9bV0i","executionInfo":{"status":"ok","timestamp":1686152593793,"user_tz":-330,"elapsed":23,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":[" # Split the dataset into the training set and test set in a 70:30 ratio\n","X_train1, X_test1, y_train1, y_test1 = train_test_split(X1, y1, test_size=0.3, random_state=1)"],"metadata":{"id":"6QdM3r4Qb0s5","executionInfo":{"status":"ok","timestamp":1686152593793,"user_tz":-330,"elapsed":21,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["# Building a Logistic Regression, Naive Bayes, Decision Tree (CART), K - NN, SVM, andRandomForestClassifier models; Also, print their accuracies\n","models1 = [\n","    LogisticRegression(),\n","    GaussianNB(),\n","    DecisionTreeClassifier(),\n","    KNeighborsClassifier(),\n","    SVC(),\n","    RandomForestClassifier()\n","]\n","# Train and evaluate each model\n","for model in models1:\n","    model.fit(X_train1, y_train1)\n","    y_pred1 = model.predict(X_test1)\n","    accuracy = accuracy_score(y_test1, y_pred1)\n","    print(f\"{type(model).__name__} accuracy: {accuracy}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wfpHYpHgcFUo","executionInfo":{"status":"ok","timestamp":1686152594587,"user_tz":-330,"elapsed":814,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"985d9ad6-8306-4516-bf9f-f909bebf8113"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["LogisticRegression accuracy: 0.631578947368421\n","GaussianNB accuracy: 0.631578947368421\n","DecisionTreeClassifier accuracy: 0.9415204678362573\n","KNeighborsClassifier accuracy: 0.7660818713450293\n","SVC accuracy: 0.631578947368421\n","RandomForestClassifier accuracy: 0.9415204678362573\n"]}]},{"cell_type":"code","source":["#  Calculate the ROC_AUC score based on the False Positive Rate (FPR) and True Positive Rate (TPR)\n","roc_auc = roc_auc_score(y_test1, y_pred1)\n","print(\"ROC_AUC score:\", roc_auc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZvzHLB6IcfAQ","executionInfo":{"status":"ok","timestamp":1686152594587,"user_tz":-330,"elapsed":26,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"e84b87db-fe44-4629-aa51-8df027076a61"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["ROC_AUC score: 0.9338624338624338\n"]}]},{"cell_type":"code","source":["# Plot the ROC Curve using the Matplotlib library\n","# Calculate the probabilities\n","y_prob = model.predict_proba(X_test1)[:, 1]\n","\n","# Calculate the False Positive Rate and True Positive Rate\n","fpr, tpr, thresholds = roc_curve(y_test1, y_prob)\n","plt.title('Receiver Operating Characteristic, ')\n","plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n","plt.legend(loc = 'lower right')\n","plt.plot([0, 1], [0, 1],'r--')\n","plt.xlim([0, 1])\n","plt.ylim([0, 1])\n","plt.ylabel('True Positive Rate')\n","plt.xlabel('False Positive Rate')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"5kEbyy69dcpk","executionInfo":{"status":"ok","timestamp":1686152594588,"user_tz":-330,"elapsed":23,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"aa3e5b36-5652-4dbe-aa4f-4218acb69563"},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Calculate the F1 Score\n","f1 = f1_score(y_test1, y_pred1)\n","print(\"F1 Score:\", f1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dSu-E8OmeIbz","executionInfo":{"status":"ok","timestamp":1686152594589,"user_tz":-330,"elapsed":21,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"1a862471-54ee-492c-9d79-6f1cf5fdf67b"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["F1 Score: 0.9193548387096775\n"]}]},{"cell_type":"code","source":["#  Calculate and Print the Precision, Recall, and F1 s core using the classification_report() function\n","report = classification_report(y_test, y_pred)\n","print(report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pIk_KfIeeQr_","executionInfo":{"status":"ok","timestamp":1686152594589,"user_tz":-330,"elapsed":17,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"00b044bc-2203-4259-a265-52cef924ac31"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.95      0.97      0.96       108\n","           1       0.95      0.92      0.94        63\n","\n","    accuracy                           0.95       171\n","   macro avg       0.95      0.95      0.95       171\n","weighted avg       0.95      0.95      0.95       171\n","\n"]}]},{"cell_type":"markdown","source":["\n","Problem Statement\n","3\n",":\n","\n","Load the â€˜voice.csvâ€™ dataset into a DataFrame and perform the following \n","tasks:\n","\n","1.\n","Considering the â€˜labelâ€™ column as the target variable, rename the column as \n","â€˜Gender_Identifiedâ€™\n","\n","2.\n","Using the preprocessing() function, label the target column\n","\n","3.\n","Separate the target\n","variable and the feature vectors\n","\n","4.\n","Build a RandomForestClassifier model and find the best parameters using a Grid search\n","\n","5.\n","Print the best parameters and the best estimator"],"metadata":{"id":"N0rOFAl9e08a"}},{"cell_type":"code","source":["Data2=pd.read_csv(\"/content/voice.csv\")\n","Data2.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"givn2zzDe_dH","executionInfo":{"status":"ok","timestamp":1686152594590,"user_tz":-330,"elapsed":16,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"bb198740-cd3d-4b3d-c97c-54e15854f518"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   meanfreq        sd    median       Q25       Q75       IQR       skew  \\\n","0  0.059781  0.064241  0.032027  0.015071  0.090193  0.075122  12.863462   \n","1  0.066009  0.067310  0.040229  0.019414  0.092666  0.073252  22.423285   \n","2  0.077316  0.083829  0.036718  0.008701  0.131908  0.123207  30.757155   \n","3  0.151228  0.072111  0.158011  0.096582  0.207955  0.111374   1.232831   \n","4  0.135120  0.079146  0.124656  0.078720  0.206045  0.127325   1.101174   \n","\n","          kurt    sp.ent       sfm  ...  centroid   meanfun    minfun  \\\n","0   274.402906  0.893369  0.491918  ...  0.059781  0.084279  0.015702   \n","1   634.613855  0.892193  0.513724  ...  0.066009  0.107937  0.015826   \n","2  1024.927705  0.846389  0.478905  ...  0.077316  0.098706  0.015656   \n","3     4.177296  0.963322  0.727232  ...  0.151228  0.088965  0.017798   \n","4     4.333713  0.971955  0.783568  ...  0.135120  0.106398  0.016931   \n","\n","     maxfun   meandom    mindom    maxdom   dfrange   modindx  label  \n","0  0.275862  0.007812  0.007812  0.007812  0.000000  0.000000   male  \n","1  0.250000  0.009014  0.007812  0.054688  0.046875  0.052632   male  \n","2  0.271186  0.007990  0.007812  0.015625  0.007812  0.046512   male  \n","3  0.250000  0.201497  0.007812  0.562500  0.554688  0.247119   male  \n","4  0.266667  0.712812  0.007812  5.484375  5.476562  0.208274   male  \n","\n","[5 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-d6ec8377-cbf2-478d-914c-9d12dc0c54d8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>meanfreq</th>\n","      <th>sd</th>\n","      <th>median</th>\n","      <th>Q25</th>\n","      <th>Q75</th>\n","      <th>IQR</th>\n","      <th>skew</th>\n","      <th>kurt</th>\n","      <th>sp.ent</th>\n","      <th>sfm</th>\n","      <th>...</th>\n","      <th>centroid</th>\n","      <th>meanfun</th>\n","      <th>minfun</th>\n","      <th>maxfun</th>\n","      <th>meandom</th>\n","      <th>mindom</th>\n","      <th>maxdom</th>\n","      <th>dfrange</th>\n","      <th>modindx</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.059781</td>\n","      <td>0.064241</td>\n","      <td>0.032027</td>\n","      <td>0.015071</td>\n","      <td>0.090193</td>\n","      <td>0.075122</td>\n","      <td>12.863462</td>\n","      <td>274.402906</td>\n","      <td>0.893369</td>\n","      <td>0.491918</td>\n","      <td>...</td>\n","      <td>0.059781</td>\n","      <td>0.084279</td>\n","      <td>0.015702</td>\n","      <td>0.275862</td>\n","      <td>0.007812</td>\n","      <td>0.007812</td>\n","      <td>0.007812</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>male</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.066009</td>\n","      <td>0.067310</td>\n","      <td>0.040229</td>\n","      <td>0.019414</td>\n","      <td>0.092666</td>\n","      <td>0.073252</td>\n","      <td>22.423285</td>\n","      <td>634.613855</td>\n","      <td>0.892193</td>\n","      <td>0.513724</td>\n","      <td>...</td>\n","      <td>0.066009</td>\n","      <td>0.107937</td>\n","      <td>0.015826</td>\n","      <td>0.250000</td>\n","      <td>0.009014</td>\n","      <td>0.007812</td>\n","      <td>0.054688</td>\n","      <td>0.046875</td>\n","      <td>0.052632</td>\n","      <td>male</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.077316</td>\n","      <td>0.083829</td>\n","      <td>0.036718</td>\n","      <td>0.008701</td>\n","      <td>0.131908</td>\n","      <td>0.123207</td>\n","      <td>30.757155</td>\n","      <td>1024.927705</td>\n","      <td>0.846389</td>\n","      <td>0.478905</td>\n","      <td>...</td>\n","      <td>0.077316</td>\n","      <td>0.098706</td>\n","      <td>0.015656</td>\n","      <td>0.271186</td>\n","      <td>0.007990</td>\n","      <td>0.007812</td>\n","      <td>0.015625</td>\n","      <td>0.007812</td>\n","      <td>0.046512</td>\n","      <td>male</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.151228</td>\n","      <td>0.072111</td>\n","      <td>0.158011</td>\n","      <td>0.096582</td>\n","      <td>0.207955</td>\n","      <td>0.111374</td>\n","      <td>1.232831</td>\n","      <td>4.177296</td>\n","      <td>0.963322</td>\n","      <td>0.727232</td>\n","      <td>...</td>\n","      <td>0.151228</td>\n","      <td>0.088965</td>\n","      <td>0.017798</td>\n","      <td>0.250000</td>\n","      <td>0.201497</td>\n","      <td>0.007812</td>\n","      <td>0.562500</td>\n","      <td>0.554688</td>\n","      <td>0.247119</td>\n","      <td>male</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.135120</td>\n","      <td>0.079146</td>\n","      <td>0.124656</td>\n","      <td>0.078720</td>\n","      <td>0.206045</td>\n","      <td>0.127325</td>\n","      <td>1.101174</td>\n","      <td>4.333713</td>\n","      <td>0.971955</td>\n","      <td>0.783568</td>\n","      <td>...</td>\n","      <td>0.135120</td>\n","      <td>0.106398</td>\n","      <td>0.016931</td>\n","      <td>0.266667</td>\n","      <td>0.712812</td>\n","      <td>0.007812</td>\n","      <td>5.484375</td>\n","      <td>5.476562</td>\n","      <td>0.208274</td>\n","      <td>male</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 21 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6ec8377-cbf2-478d-914c-9d12dc0c54d8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d6ec8377-cbf2-478d-914c-9d12dc0c54d8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d6ec8377-cbf2-478d-914c-9d12dc0c54d8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["#Considering the â€˜labelâ€™ column as the target variable, rename the column as â€˜Gender_Identifiedâ€™\n","Data2.rename(columns={'label': 'Gender_Identified'}, inplace=True)"],"metadata":{"id":"MrBVSak2fpeB","executionInfo":{"status":"ok","timestamp":1686152594996,"user_tz":-330,"elapsed":420,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["# Using the preprocessing() function, label the target column\n","label_encoder = preprocessing.LabelEncoder()\n","# Encode the target column\n","Data2['Gender_Identified'] = label_encoder.fit_transform(Data2['Gender_Identified'])"],"metadata":{"id":"PVIcY-LAfzg-","executionInfo":{"status":"ok","timestamp":1686152594997,"user_tz":-330,"elapsed":19,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["#Separate the target variable and the feature vectors\n","X = Data2.drop('Gender_Identified', axis=1)\n","y = Data2['Gender_Identified']"],"metadata":{"id":"mTPVGr30gGjc","executionInfo":{"status":"ok","timestamp":1686152594998,"user_tz":-330,"elapsed":18,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["# Build a RandomForestClassifier model and find the best parameters using a Grid search\n","# Define the parameter grid\n","param_grid = {\n","    'n_estimators': [100, 200, 300],\n","    'max_depth': [None, 5, 10],\n","    'min_samples_split': [2, 5, 10]\n","}\n","\n","# Initialize the RandomForestClassifier\n","rf = RandomForestClassifier()\n","\n","# Perform GridSearchCV\n","grid_search = GridSearchCV(rf, param_grid, cv=5)\n","grid_search.fit(X1, y1)\n","\n","# Get the best parameters and best estimator\n","best_params = grid_search.best_params_\n","best_estimator = grid_search.best_estimator_\n","print(\"Best Parameters:\", best_params)\n","print(\"Best Estimator:\", best_estimator)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CvAQLm1fgM5p","executionInfo":{"status":"ok","timestamp":1686152665710,"user_tz":-330,"elapsed":70728,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"0f58ec49-b4a8-48f1-bdb0-b90e2a895b63"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Parameters: {'max_depth': None, 'min_samples_split': 2, 'n_estimators': 100}\n","Best Estimator: RandomForestClassifier()\n"]}]},{"cell_type":"markdown","source":["**Q4. Problem Statement: Boosting Models with AdaBoost**\n","\n","The â€˜seeds.csvâ€™ dataset contains the data about the various characteristics of wheat seeds, the â€˜Typeâ€™ column consisit of three unique values, 1, 2, 3, which are classified based on the charecterstics of seeds entailing in other columns.\n","\n","Load the â€˜seeds.csvâ€™ dataset into a DataFrame and considering the 'Type' column as target,  perform the following tasks:\n","1.\tAnalyze  the target column by printing itâ€™s unique values\n","2.\tSeparate the feature vectors and the target variable\n","3.\tSplit the dataset into train and test sets in a 70:30 ratio\n","4.\tBuild a Decision Tree Classifier and a GaussianNB model and print their accuracy scores\n","5.\tFor the Decision Tree Classifier and a GaussianNB models boost the accuracy using AdaBoost Classifier and compare the accuracy scores with original models using a bar plot"],"metadata":{"id":"8sB8WhzXiPUS"}},{"cell_type":"code","source":["Data3=pd.read_csv(\"/content/seeds.csv\")\n","Data3.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"CSCaz3i0iPEL","executionInfo":{"status":"ok","timestamp":1686152966891,"user_tz":-330,"elapsed":421,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"4c670949-2ecb-48f7-d85a-98e3bbab2edc"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Area  Perimeter  Compactness  Kernel.Length  Kernel.Width  \\\n","0  15.26      14.84       0.8710          5.763         3.312   \n","1  14.88      14.57       0.8811          5.554         3.333   \n","2  14.29      14.09       0.9050          5.291         3.337   \n","3  13.84      13.94       0.8955          5.324         3.379   \n","4  16.14      14.99       0.9034          5.658         3.562   \n","\n","   Asymmetry.Coeff  Kernel.Groove  Type  \n","0            2.221          5.220     1  \n","1            1.018          4.956     1  \n","2            2.699          4.825     1  \n","3            2.259          4.805     1  \n","4            1.355          5.175     1  "],"text/html":["\n","  <div id=\"df-a7edf2b5-d128-4c06-9e31-2c930a960822\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Area</th>\n","      <th>Perimeter</th>\n","      <th>Compactness</th>\n","      <th>Kernel.Length</th>\n","      <th>Kernel.Width</th>\n","      <th>Asymmetry.Coeff</th>\n","      <th>Kernel.Groove</th>\n","      <th>Type</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15.26</td>\n","      <td>14.84</td>\n","      <td>0.8710</td>\n","      <td>5.763</td>\n","      <td>3.312</td>\n","      <td>2.221</td>\n","      <td>5.220</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>14.88</td>\n","      <td>14.57</td>\n","      <td>0.8811</td>\n","      <td>5.554</td>\n","      <td>3.333</td>\n","      <td>1.018</td>\n","      <td>4.956</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>14.29</td>\n","      <td>14.09</td>\n","      <td>0.9050</td>\n","      <td>5.291</td>\n","      <td>3.337</td>\n","      <td>2.699</td>\n","      <td>4.825</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>13.84</td>\n","      <td>13.94</td>\n","      <td>0.8955</td>\n","      <td>5.324</td>\n","      <td>3.379</td>\n","      <td>2.259</td>\n","      <td>4.805</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>16.14</td>\n","      <td>14.99</td>\n","      <td>0.9034</td>\n","      <td>5.658</td>\n","      <td>3.562</td>\n","      <td>1.355</td>\n","      <td>5.175</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7edf2b5-d128-4c06-9e31-2c930a960822')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a7edf2b5-d128-4c06-9e31-2c930a960822 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a7edf2b5-d128-4c06-9e31-2c930a960822');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["# Analyze the target column by printing itâ€™s unique values\n","unique_values = Data3['Type'].unique()\n","print(\"Unique values in the target column:\")\n","print(unique_values)\n","target_ratio=pd.DataFrame({'Counts':Data3.Type.value_counts(),'Percentage':Data3.Type.value_counts()/len(Data3)})\n","target_ratio"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"DuLSNNe1jQxI","executionInfo":{"status":"ok","timestamp":1686153096134,"user_tz":-330,"elapsed":16,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"663dc4ff-9a7a-43d8-988c-a346a69c88ca"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Unique values in the target column:\n","[1 2 3]\n"]},{"output_type":"execute_result","data":{"text/plain":["   Counts  Percentage\n","2      68    0.341709\n","1      66    0.331658\n","3      65    0.326633"],"text/html":["\n","  <div id=\"df-480cb8ef-de4c-481c-b78d-afe1cbf292d7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Counts</th>\n","      <th>Percentage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>68</td>\n","      <td>0.341709</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>66</td>\n","      <td>0.331658</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>65</td>\n","      <td>0.326633</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-480cb8ef-de4c-481c-b78d-afe1cbf292d7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-480cb8ef-de4c-481c-b78d-afe1cbf292d7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-480cb8ef-de4c-481c-b78d-afe1cbf292d7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["# Separate the feature vectors and the target variable\n","X2=Data3.drop('Type',axis=1)\n","y2=Data3['Type']"],"metadata":{"id":"viZedvh3jsgD","executionInfo":{"status":"ok","timestamp":1686153180053,"user_tz":-330,"elapsed":422,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["# Split the dataset into train and test sets in a 70:30 ratio\n","X_train2, X_test2, y_train2, y_test2 = train_test_split(X2, y2, test_size=0.3, random_state=1)"],"metadata":{"id":"wEST7QFVj9Vj","executionInfo":{"status":"ok","timestamp":1686153239370,"user_tz":-330,"elapsed":5,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# Build and evaluate Decision Tree Classifier\n","dt_clf=DecisionTreeClassifier(max_depth=1)\n","dt_clf.fit(X_train2,y_train2)\n","dt_pred=dt_clf.predict(X_test2)\n","acc_dt=round(accuracy_score(y_test2,dt_pred),3)\n","print(\"Accuracy score of the Decision tree model is:\")\n","print(acc_dt)\n","# Build and evaluate GaussianNB model\n","gnb_model=GaussianNB()\n","gnb_model.fit(X_train2,y_train2)\n","gnb_pred=gnb_model.predict(X_test2)\n","acc_gnb=round(accuracy_score(y_test2,gnb_pred),3)\n","print(\"Accuracy score of the GaussianNB model is:\")\n","print(acc_gnb)\n","ada=AdaBoostClassifier(n_estimators=100,learning_rate=0.6)\n","ada.fit(X_train2,y_train2)\n","ada_pred=ada.predict(X_test2)\n","acc_ada=round(accuracy_score(y_test2,ada_pred),3)\n","print(acc_ada)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QzNu0UuOkKAa","executionInfo":{"status":"ok","timestamp":1686153915218,"user_tz":-330,"elapsed":816,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"34b89a69-b14c-4d43-d294-8fd2f92aced7"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy score of the Decision tree model is:\n","0.617\n","Accuracy score of the GaussianNB model is:\n","0.9\n","0.933\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(10,2))\n","plt.barh(np.arange(4),[acc_dt,acc_gnb,acc_ada,acc_agnb],\\\n","         tick_label=['Decision Tree','GaussianNB','AdaBoost(Decision Tree)','AdaBoost(GaussianNB)'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":231},"id":"kHbIMNvQknWU","executionInfo":{"status":"ok","timestamp":1686153919950,"user_tz":-330,"elapsed":831,"user":{"displayName":"S Dhaneshan","userId":"18179611958018046570"}},"outputId":"eda45355-edcd-472e-d1d8-74ea126f7261"},"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<BarContainer object of 4 artists>"]},"metadata":{},"execution_count":69},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x200 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}